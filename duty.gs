/**********************
 * duty.gs ‚Äî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–æ—á–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
 **********************/

const DUTY_HOURS = Array.from({length: 24}, (_, i) => String(i).padStart(2, "0"));

/* -------------------------
   –£—Ç–∏–ª–∏—Ç—ã
   ------------------------ */
function normalizeName(raw) {
  // —É–±–∏—Ä–∞–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, –æ–±—Ä–µ–∑–∞–µ–º, —Å–Ω–∏–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä, —É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ @
  return String(raw || "")
    .replace(/\u00A0/g, " ")
    .trim()
    .replace(/^@+/, "")
    .toLowerCase();
}

/* -------------------------
   0. –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–æ–≤
   ------------------------ */
function ensureDutySheets() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();

  let schedule = ss.getSheetByName("DutySchedule");
  if (!schedule) {
    schedule = ss.insertSheet("DutySchedule");
    const data = [["Hour", "Name", "Manual"]];

    // —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è 24 —á–∞—Å–æ–≤
    for (let h = 0; h < 24; h++) {
      const hh = String(h).padStart(2, "0");
      data.push([hh, "", false]);
    }

    schedule.getRange(1,1,data.length,3).setValues(data);
    schedule.setColumnWidths(1,3,130);
    schedule.getRange("A1:C1")
      .setFontWeight("bold")
      .setBackground("#ffd966")
      .setHorizontalAlignment("center");
    schedule.getRange("A2:A25").setHorizontalAlignment("center");
  }

  let queue = ss.getSheetByName("DutyQueue");
  if (!queue) {
    queue = ss.insertSheet("DutyQueue");
    const data = [
      ["Order","Name","Manual","Active"],
      [1,"@r.gabibov",false,true],
      [2,"@g.kraynik",false,true],
      [3,"@m.marinina",false,true],
      [4,"@v.lisovskaya",false,true],
      [5,"@k.vagabova",false,true],
      [6,"@m.poryvay",false,true],
      [7,"@s.denisov",false,true],
    ];
    queue.getRange(1,1,data.length,4).setValues(data);
    queue.setColumnWidths(1,4,130);
    queue.getRange("A1:D1")
      .setFontWeight("bold")
      .setBackground("#c6e0b4")
      .setHorizontalAlignment("center");
  }

  let main = ss.getSheetByName("Sheet1");
  if (!main) {
    main = ss.insertSheet("Sheet1");
    main.getRange("A1:D1")
      .setValues([["Name","Urgent","NonUrgent","DutyStatus"]])
      .setFontWeight("bold")
      .setBackground("#d9e1f2")
      .setHorizontalAlignment("center");
    main.setColumnWidths(1,4,130);
  }

  SpreadsheetApp.flush();
  Utilities.sleep(150);
}


/* -------------------------
   1. –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   ------------------------ */
function getDutySchedule() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("DutySchedule");
  if (!sheet) return {};
  const rows = Math.max(sheet.getLastRow() - 1, 0);
  if (rows === 0) return {};
  const data = sheet.getRange(2,1,rows,3).getValues();
  const res = {};
  for (const [hour, name, manual] of data) {
  if (hour === null || hour === undefined || hour === "") continue;
  const h = String(hour).padStart(2, "0");
  res[h] = { name: name || "", manual: manual === true };
  // –¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∫–ª—é—á–∞, —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏–ª–æ—Å—å –∏ –∫–∞–∫ "0"
  res[String(Number(hour))] = res[h];
}
  return res;
}

function getDutyQueue() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("DutyQueue");
  if (!sheet) return [];

  const rows = Math.max(sheet.getLastRow() - 1, 0);
  if (rows === 0) {
    // fallback: —Å–æ–±—Ä–∞—Ç—å –∏–∑ DutySchedule (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
    const sched = getDutySchedule();
    const unique = [...new Set(Object.values(sched).map(x => x.name).filter(Boolean))];
    return unique.map((n,i) => ({ order: i+1, name: String(n).trim(), manualFlag:false, active:true }));
  }

  const data = sheet.getRange(2,1,rows,4).getValues();
  return data
    .filter(r => r[1] && String(r[1]).trim() !== "")
    .sort((a,b) => (Number(a[0])||0) - (Number(b[0])||0))
    .map(r => ({ order: r[0], name: String(r[1]).trim(), manualFlag: r[2] === true, active: r[3] === true }));
}

function getUnavailable() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("Sheet1");
  if (!sheet) return new Set();

  // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã
  SpreadsheetApp.flush();
  Utilities.sleep(100);

  const rows = Math.max(sheet.getLastRow() - 1, 0);
  if (rows === 0) return new Set();

  const values = sheet.getRange(2,1,rows,3).getValues();
  const set = new Set();

  for (const [nameRaw, urgentRaw, nonUrgRaw] of values) {
    const name = String(nameRaw || "").trim();
    if (!name) continue;

    const urgent = String(urgentRaw || "").toLowerCase();
    const nonUrg = String(nonUrgRaw || "").toLowerCase();

    // –∏—â–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (includes) ‚Äî —á—Ç–æ–±—ã –ª–æ–≤–∏—Ç—å "vacation until ..." –∏ –ø—Ä.
    if (["sick","vacation","break"].some(k => (urgent.indexOf(k) !== -1) || (nonUrg.indexOf(k) !== -1))) {
      // –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –∫–∞–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è (–∏ —Å @-–≤–µ—Ä—Å–∏–µ–π), —á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–ª–∏
      const nNorm = normalizeName(name);
      set.add(nNorm);
      set.add("@" + nNorm);
    }
  }

  return set;
}

/* -------------------------
   2. –ê–≤—Ç–æ-–ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ
   ------------------------ */
function autoDutyScheduler() {
  ensureDutySheets();

  const queue = getDutyQueue();
  if (!queue.length) {
    Logger.log("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞");
    SpreadsheetApp.getActiveSpreadsheet().toast("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞", "Duty Scheduler", 3);
    return {};
  }

  const unavailable = getUnavailable();
  const current = getDutySchedule();

  // üß≠ –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö, –Ω–µ –≤ –æ—Ç–ø—É—Å–∫–µ/–±–æ–ª—å–Ω–∏—á–Ω–æ–º
  let pool = queue
    .filter(q => q.active && q.name && !unavailable.has(normalizeName(q.name)))
    .map(q => q.name);

  // fallback ‚Äî –µ—Å–ª–∏ –≤—Å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –±–µ—Ä—ë–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö
  if (!pool.length) {
    pool = queue.filter(q => q.active && q.name).map(q => q.name);
  }

  if (!pool.length) {
    Logger.log("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");
    SpreadsheetApp.getActiveSpreadsheet().toast("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "Duty Scheduler", 3);
    return {};
  }

  // üìä –ü–æ–¥—Å—á—ë—Ç —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏)
  const pastStats = {};
  for (const h of Object.keys(current)) {
    const entry = current[h];
    if (entry && entry.name) {
      const n = normalizeName(entry.name);
      pastStats[n] = (pastStats[n] || 0) + 1;
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤
  const assignCounts = Object.fromEntries(
    pool.map(p => [normalizeName(p), pastStats[normalizeName(p)] || 0])
  );

  const result = {};
  let prev = null;

  // ‚öôÔ∏è –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–ª—é—á–∏ –±—É–¥—É—Ç "00", "01", ..., "23"
  const hours = DUTY_HOURS.map(h => String(h).padStart(2, "0"));

  for (const h of hours) {
    const existing = current[h];

    // üîí –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä—É—á–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø—Ä–æ—á–µ—Ä–∫–∏
if (existing && existing.name) {
  const nameStr = String(existing.name).trim();
  // –µ—Å–ª–∏ –≤—Ä—É—á–Ω—É—é —Å—Ç–æ–∏—Ç "-", –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —ç—Ç–æ—Ç —á–∞—Å
  if (nameStr === "-") {
    result[h] = { name: "-", manual: true };
    prev = null; // –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ
    continue;
  }
  if (existing.manual === true || existing.manual === "TRUE") {
    result[h] = { name: nameStr, manual: true };
    const n = normalizeName(nameStr);
    if (assignCounts.hasOwnProperty(n)) assignCounts[n]++;
    prev = nameStr;
    continue;
  }
}


    // üéØ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã ‚Äî –≤—Å–µ, –∫—Ä–æ–º–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
    const candidates = pool.filter(p => normalizeName(p) !== normalizeName(prev));

    // ‚öñÔ∏è –í—ã–±–æ—Ä —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º —á–∏—Å–ª–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
    candidates.sort((a, b) => {
      const diff =
        (assignCounts[normalizeName(a)] || 0) - (assignCounts[normalizeName(b)] || 0);
      if (diff !== 0) return diff;
      return Math.random() - 0.5; // —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ
    });

    const chosen = candidates[0] || pool[0];
    result[h] = { name: chosen, manual: false };
    assignCounts[normalizeName(chosen)] =
      (assignCounts[normalizeName(chosen)] || 0) + 1;
    prev = chosen;
  }

  Logger.log("üïí –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —á–∞—Å–∞–º: " + Object.keys(result).join(", "));

  writeDutySchedule(result);
  SpreadsheetApp.getActiveSpreadsheet().toast("‚úÖ –ê–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "Duty Scheduler", 3);
  Logger.log("‚úÖ –ê–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)");

  return result;
}

/* -------------------------
   3. –ó–∞–ø–∏—Å—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
   ------------------------ */
function writeDutySchedule(schedule) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("DutySchedule");
  if (!sheet) return;

  const out = [["Hour", "Name", "Manual"]];

  for (const rawH of DUTY_HOURS) {
    // –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –∫–ª—é—á–∏ –∫ –¥–≤—É—Ö–∑–Ω–∞—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ "0" –≤–º–µ—Å—Ç–æ "00")
    const h = String(rawH).padStart(2, "0");
    const item = schedule[h] || schedule[String(Number(h))] || { name: "", manual: false };
    out.push([h, item.name, item.manual]);
  }

  // –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
  sheet.clearContents();
  sheet.getRange(1, 1, out.length, 3).setValues(out);
  sheet.setColumnWidths(1, 3, 120);
  sheet.getRange("A1:C1").setFontWeight("bold").setBackground("#ffd966");

  SpreadsheetApp.flush();
  Logger.log("‚úÖ DutySchedule –æ–±–Ω–æ–≤–ª—ë–Ω (—á–∞—Å—ã –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã)");
}


/* -------------------------
   4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –ª–∏—Å—Ç–µ
   ------------------------ */
/* -------------------------
   4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –ª–∏—Å—Ç–µ
   ------------------------ */
function updateDutyStatus() {
  ensureDutySheets();

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("Sheet1");
  if (!sheet) return;

  let duty = getDutySchedule();
  if (!Object.keys(duty).length) duty = autoDutyScheduler();

  // –≤—Å–ø–æ–º. —Ñ—É–Ω–∫—Ü–∏—è: –Ω–∞–π–¥—ë–º –∏–º—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ –∏ –¥–ª—è "00"/"0" –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
  function findDutyNameForHour(dutyObj, hourStr) {
    const hStr = String(hourStr).padStart(2, "0"); // "00"
    const hNum = String(Number(hourStr));          // "0"
    return (dutyObj[hStr] && dutyObj[hStr].name) || (dutyObj[hNum] && dutyObj[hNum].name) || "";
  }

  // –µ—Å–ª–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ç–æ–∏—Ç "-", —Ç–æ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ—Ç —Å–ª–æ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º
  function isHourSkipped(name) {
    return String(name || "").trim() === "-";
  }

  const now = new Date();
  const tz = Session.getScriptTimeZone() || "GMT+3";
  const curH = Utilities.formatDate(now, tz, "HH");
  const nextH = Utilities.formatDate(new Date(now.getTime() + 3600000), tz, "HH");
  const curM = now.getMinutes();

  let onDutyNameRaw = findDutyNameForHour(duty, curH);
  let comingNameRaw = findDutyNameForHour(duty, nextH);

  // –ï—Å–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞ —Å—Ç–æ–∏—Ç –ø—Ä–æ—á–µ—Ä–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ–º —Ç–∞–∫,
  // —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –ª–æ–≥–∏–∫–∞ –Ω–µ —Å—Ç–∞–≤–∏–ª–∞ "on duty" –Ω–∏–∫–æ–º—É.
  if (isHourSkipped(onDutyNameRaw)) {
    onDutyNameRaw = "";
    Logger.log(`‚è≠ –ü—Ä–æ–ø—É—Å–∫ —á–∞—Å–∞ ${curH}:00 ‚Äî —Å—Ç–æ–∏—Ç –ø—Ä–æ—á–µ—Ä–∫`);
  }
  // –î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞ ‚Äî –µ—Å–ª–∏ —Å—Ç–æ–∏—Ç –ø—Ä–æ—á–µ—Ä–∫, –Ω–µ —Å—Ç–∞–≤–∏–º "duty coming"
  if (isHourSkipped(comingNameRaw)) {
    comingNameRaw = "";
    Logger.log(`‚è≠ –ü—Ä–æ–ø—É—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞ ${nextH}:00 ‚Äî —Å—Ç–æ–∏—Ç –ø—Ä–æ—á–µ—Ä–∫`);
  }

  const onDutyNorm = normalizeName(onDutyNameRaw);
  const comingNorm = normalizeName(comingNameRaw);

  const total = Math.max(sheet.getLastRow() - 1, 0);
  if (total === 0) return;

  const names = sheet.getRange(2, 1, total, 1).getValues().map(r => String(r[0] || "").trim());
  const statuses = sheet.getRange(2, 4, total, 1).getValues();

  for (let i = 0; i < names.length; i++) {
    const nameNorm = normalizeName(names[i]);
    if (nameNorm && onDutyNorm && nameNorm === onDutyNorm) {
      statuses[i][0] = "on duty";
    } else if (nameNorm && comingNorm && nameNorm === comingNorm && curM >= 50) {
      statuses[i][0] = "duty coming";
    } else {
      // –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å (–µ—Å–ª–∏ –Ω–µ —Ä—É—á–Ω–æ–π ‚Äî —Ç–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ –æ—á–∏—â–∞–µ—Ç –≤—Å–µ–≥–¥–∞)
      statuses[i][0] = "";
    }
  }

  sheet.getRange(2, 4, total, 1).setValues(statuses);
  SpreadsheetApp.flush();
  Logger.log("‚úÖ –°—Ç–∞—Ç—É—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –ª–∏—Å—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
}



/* -------------------------
   5. –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Active –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
   ------------------------ */
function rebuildAndApplyDuty() {
  ensureDutySheets();

  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const queueSheet = ss.getSheetByName("DutyQueue");
  const dutySheet = ss.getSheetByName("DutySchedule");

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∞–≤–∫–∏
  SpreadsheetApp.flush();
  Utilities.sleep(150);

  const unavailable = getUnavailable();
  // === 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–µ—Ä–µ–¥–∏ ===
  if (queueSheet) {
    const rows = Math.max(queueSheet.getLastRow() - 1, 0);
    if (rows > 0) {
      const range = queueSheet.getRange(2, 1, rows, 4);
      const data = range.getValues();
      let changed = false;

      for (let i = 0; i < data.length; i++) {
  const rawHour = data[i][0];
  const rawName = String(data[i][1] || "").trim();
  const nameCell = data[i][1];

  if (!rawHour || !nameCell || rawName === "-") continue;

  const nNorm = normalizeName(rawName);
  const wasActive = data[i][3] === true;
  const nowActive = !unavailable.has(nNorm) && !unavailable.has("@" + nNorm);

  if (wasActive !== nowActive) {
    data[i][3] = nowActive;
    changed = true;

    const msg = nowActive
      ? `${rawName} —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω`
      : `${rawName} –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–∫–ª—é—á—ë–Ω (sick/vacation)`;

    ss.toast(msg, "Duty Update", 3);
    Logger.log("üîî " + msg);
  }
}


      if (changed) {
        range.setValues(data);
        SpreadsheetApp.flush();
        Utilities.sleep(150);
      }
    }
  }

  // === 2Ô∏è‚É£ –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–ª—é—á–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (—á—Ç–æ–±—ã "0" ‚Üí "00") ===
  const duty = {};
  if (dutySheet) {
    const data = dutySheet.getDataRange().getValues();
    for (let i = 1; i < data.length; i++) {
      const rawHour = data[i][0];
      const nameCell = data[i][1];
      if (!rawHour || !nameCell) continue;

      const hourKey = String(rawHour).padStart(2, "0"); // "0" ‚Üí "00"
      duty[hourKey] = { name: String(nameCell).trim() };
    }
  }

  // === 3Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ ===
  const tz = Session.getScriptTimeZone() || "GMT+3";
  const now = new Date();
  const curH = Utilities.formatDate(now, tz, "HH");
  const nextH = Utilities.formatDate(new Date(now.getTime() + 3600000), tz, "HH");

  const curDuty = duty[curH]?.name || "";
  const nextDuty = duty[nextH]?.name || "";

  Logger.log(`üïõ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${curH}:00 ‚Äî OnDuty: ${curDuty} ‚Üí Next: ${nextDuty}`);

  // === 4Ô∏è‚É£ –ü–µ—Ä–µ—Å—á—ë—Ç –æ—á–µ—Ä–µ–¥–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Duty —Å—Ç–∞—Ç—É—Å–æ–≤ ===
  autoDutyScheduler();
  Utilities.sleep(150);
  updateDutyStatus();

  ss.toast("‚úÖ –û—á–µ—Ä–µ–¥—å –∏ –¥–µ–∂—É—Ä—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", "Duty Scheduler", 3);
  Logger.log("‚úÖ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
}

